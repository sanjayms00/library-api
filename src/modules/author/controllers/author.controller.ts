import {
  Body,
  Controller,
  Delete,
  Get,
  Param,
  Post,
  Put,
  Query,
} from '@nestjs/common';
import { CreateAuthorDto } from '../dtos/create-author-request.dto';
import { AuthorService } from '../services/author.service';
import {
  Author,
  Authorlist,
  allAuthorResponse,
} from '../interfaces/author.interface';
import { UpdateAuthorDto } from '../dtos/update-author-request.dto';
import { DeleteAuthorDto } from '../dtos/delete-author-request.dto';
import { authorDetailsDto } from '../dtos/author-details-request.dto';
import { paginatorDto } from 'src/common/dtos/pagination.dto';
import {
  ApiBody,
  ApiOperation,
  ApiParam,
  ApiQuery,
  ApiResponse,
  ApiTags,
} from '@nestjs/swagger';

@ApiTags('Author')
@Controller('author')
export class AuthorController {
  constructor(private readonly authorService: AuthorService) {}

  //create author
  @Post('create')
  @ApiOperation({ summary: 'create the author' })
  @ApiResponse({
    status: 200,
    description: 'Created author data',
  })
  @ApiResponse({
    status: 400,
    description: 'Bad request, and error response message',
  })
  @ApiBody({
    schema: {
      type: 'object',
      properties: {
        name: {
          type: 'string',
          example: 'abhijith kk',
          description: 'author name',
        },
        biography: {
          type: 'string',
          example: 'this is an example biography',
          description: 'biography description',
        },
        birthdate: {
          type: 'date',
          example: '2024-02-11T00:00:00.000Z',
          description: 'date of bith',
        },
      },
    },
  })
  createAuthor(@Body() createAuthor: CreateAuthorDto): Promise<Author> {
    return this.authorService.createAuthor(createAuthor);
  }

  //update author
  @Put('update')
  @ApiOperation({ summary: 'Update the author' })
  @ApiBody({
    schema: {
      type: 'object',
      properties: {
        _id: {
          type: 'string',
          example: '6670249449ae6bf59309b6d4',
          description: 'A unique id generated by mongodb',
        },
        name: {
          type: 'string',
          example: 'abhijith kk',
          description: 'author name',
        },
        biography: {
          type: 'string',
          example: 'this is an example biography',
          description: 'biography description',
        },
        birthdate: {
          type: 'date',
          example: '2024-02-11T00:00:00.000Z',
          description: 'date of bith',
        },
      },
      required: ['_id', 'name', 'birthdate'],
    },
  })
  @ApiResponse({
    status: 200,
    description: 'Update author data',
  })
  @ApiResponse({
    status: 404,
    description: 'Author not found',
  })
  async updateAuthor(@Body() updateAuthor: UpdateAuthorDto): Promise<any> {
    return await this.authorService.updateAuthor(updateAuthor);
  }

  //delete author
  @Delete('delete/:id')
  @ApiOperation({ summary: 'Delete the author' })
  @ApiParam({
    name: 'id',
    description: 'The ID of the author to delete',
    type: String,
    example: '6670249449ae6bf59309b6d4',
  })
  @ApiResponse({
    status: 200,
    description: 'The author has been successfully deleted',
  })
  @ApiResponse({
    status: 404,
    description: 'Author not found',
  })
  @ApiResponse({
    status: 403,
    description: 'Forbidden response, unable to delete if author exist',
  })
  async deleteAuthor(@Param() params: DeleteAuthorDto) {
    const { id } = params;
    return await this.authorService.deleteAuthor(id);
  }

  //all authors
  @Get()
  @ApiOperation({ summary: 'Get all Author list' })
  @ApiQuery({
    name: 'pgNo',
    required: false,
    description: 'Page number',
    type: Number,
  })
  @ApiResponse({
    status: 200,
    description: 'List of authors with pagination',
  })
  async getAllAuthors(
    @Query() query: paginatorDto,
  ): Promise<allAuthorResponse> {
    const pgNo = Object.keys(query).length <= 0 ? 0 : Number(query.pgNo);

    return await this.authorService.getAllAuthors(pgNo);
  }

  //get author by id
  @Get('detail/:id')
  @ApiOperation({ summary: 'Get author data by id' })
  @ApiParam({
    name: 'id',
    description: 'The ID of the author',
    type: String,
  })
  @ApiResponse({
    status: 200,
    description: 'Author data as response',
  })
  @ApiResponse({
    status: 404,
    description: 'Author not found response',
  })
  async getAuthorById(@Param() params: authorDetailsDto) {
    const { id } = params;
    return await this.authorService.getAuthorById(id);
  }

  //all authors list for filtering name and _id only
  @Get('list')
  @ApiOperation({ summary: 'Author list with id and name' })
  @ApiResponse({
    status: 200,
    description: 'Authors list',
  })
  async getAllAuthorList(): Promise<Authorlist[]> {
    return await this.authorService.getAllAuthorList();
  }
}
